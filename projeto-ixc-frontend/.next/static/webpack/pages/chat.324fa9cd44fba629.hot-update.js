"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/chat",{

/***/ "./connection.js":
/*!***********************!*\
  !*** ./connection.js ***!
  \***********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   connectToNATS: () => (/* binding */ connectToNATS),\n/* harmony export */   getNatsClient: () => (/* binding */ getNatsClient)\n/* harmony export */ });\n/* harmony import */ var _nats_io_nats_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @nats-io/nats-core */ \"./node_modules/@nats-io/nats-core/lib/mod.js\");\n// natsConnection.js\n\nlet natsClient = null;\nconst connectToNATS = async ()=>{\n    if (!__webpack_require__.g.natsClient) {\n        try {\n            const client = await (0,_nats_io_nats_core__WEBPACK_IMPORTED_MODULE_0__.wsconnect)({\n                servers: [\n                    'ws://localhost:3222'\n                ]\n            });\n            console.log('Conectado ao NATS:', !client.isClosed());\n            __webpack_require__.g.natsClient = client; // Salva a conexão em uma variável global\n            client.closed().then(()=>{\n                console.warn('Conexão com NATS encerrada.');\n                __webpack_require__.g.natsClient = null; // Limpa a variável global ao encerrar a conexão\n            });\n        } catch (error) {\n            console.error('Erro ao conectar ao NATS:', error);\n        }\n    }\n    return __webpack_require__.g.natsClient; // Retorna a conexão salva na variável global\n};\nconst getNatsClient = ()=>{\n    return __webpack_require__.g.natsClient; // Retorna a conexão global, caso já tenha sido estabelecida\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb25uZWN0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLG9CQUFvQjtBQUMyQjtBQUUvQyxJQUFJQyxhQUFhO0FBRVYsTUFBTUMsZ0JBQWdCO0lBQzNCLElBQUksQ0FBQ0MscUJBQU1BLENBQUNGLFVBQVUsRUFBRTtRQUN0QixJQUFJO1lBQ0YsTUFBTUcsU0FBUyxNQUFNSiw2REFBU0EsQ0FBQztnQkFBRUssU0FBUztvQkFBQztpQkFBc0I7WUFBQztZQUNsRUMsUUFBUUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDSCxPQUFPSSxRQUFRO1lBQ2xETCxxQkFBTUEsQ0FBQ0YsVUFBVSxHQUFHRyxRQUFRLHlDQUF5QztZQUVyRUEsT0FBT0ssTUFBTSxHQUFHQyxJQUFJLENBQUM7Z0JBQ25CSixRQUFRSyxJQUFJLENBQUM7Z0JBQ2JSLHFCQUFNQSxDQUFDRixVQUFVLEdBQUcsTUFBTSxnREFBZ0Q7WUFDNUU7UUFDRixFQUFFLE9BQU9XLE9BQU87WUFDZE4sUUFBUU0sS0FBSyxDQUFDLDZCQUE2QkE7UUFDN0M7SUFDRjtJQUNBLE9BQU9ULHFCQUFNQSxDQUFDRixVQUFVLEVBQUUsNkNBQTZDO0FBQ3pFLEVBQUU7QUFFSyxNQUFNWSxnQkFBZ0I7SUFDM0IsT0FBT1YscUJBQU1BLENBQUNGLFVBQVUsRUFBRSw0REFBNEQ7QUFDeEYsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9jb25uZWN0aW9uLmpzP2NkYjAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gbmF0c0Nvbm5lY3Rpb24uanNcbmltcG9ydCB7IHdzY29ubmVjdCB9IGZyb20gJ0BuYXRzLWlvL25hdHMtY29yZSc7XG5pbXBvcnQgeyBnbG9iYWwgfSBmcm9tICdzdHlsZWQtanN4L2Nzcyc7XG5sZXQgbmF0c0NsaWVudCA9IG51bGw7XG5cbmV4cG9ydCBjb25zdCBjb25uZWN0VG9OQVRTID0gYXN5bmMgKCkgPT4ge1xuICBpZiAoIWdsb2JhbC5uYXRzQ2xpZW50KSB7ICAvLyBVc2FuZG8gYSB2YXJpw6F2ZWwgZ2xvYmFsICduYXRzQ2xpZW50J1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBjbGllbnQgPSBhd2FpdCB3c2Nvbm5lY3QoeyBzZXJ2ZXJzOiBbJ3dzOi8vbG9jYWxob3N0OjMyMjInXSB9KTtcbiAgICAgIGNvbnNvbGUubG9nKCdDb25lY3RhZG8gYW8gTkFUUzonLCAhY2xpZW50LmlzQ2xvc2VkKCkpO1xuICAgICAgZ2xvYmFsLm5hdHNDbGllbnQgPSBjbGllbnQ7IC8vIFNhbHZhIGEgY29uZXjDo28gZW0gdW1hIHZhcmnDoXZlbCBnbG9iYWxcblxuICAgICAgY2xpZW50LmNsb3NlZCgpLnRoZW4oKCkgPT4ge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0NvbmV4w6NvIGNvbSBOQVRTIGVuY2VycmFkYS4nKTtcbiAgICAgICAgZ2xvYmFsLm5hdHNDbGllbnQgPSBudWxsOyAvLyBMaW1wYSBhIHZhcmnDoXZlbCBnbG9iYWwgYW8gZW5jZXJyYXIgYSBjb25leMOjb1xuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm8gYW8gY29uZWN0YXIgYW8gTkFUUzonLCBlcnJvcik7XG4gICAgfVxuICB9XG4gIHJldHVybiBnbG9iYWwubmF0c0NsaWVudDsgLy8gUmV0b3JuYSBhIGNvbmV4w6NvIHNhbHZhIG5hIHZhcmnDoXZlbCBnbG9iYWxcbn07XG5cbmV4cG9ydCBjb25zdCBnZXROYXRzQ2xpZW50ID0gKCkgPT4ge1xuICByZXR1cm4gZ2xvYmFsLm5hdHNDbGllbnQ7IC8vIFJldG9ybmEgYSBjb25leMOjbyBnbG9iYWwsIGNhc28gasOhIHRlbmhhIHNpZG8gZXN0YWJlbGVjaWRhXG59O1xuIl0sIm5hbWVzIjpbIndzY29ubmVjdCIsIm5hdHNDbGllbnQiLCJjb25uZWN0VG9OQVRTIiwiZ2xvYmFsIiwiY2xpZW50Iiwic2VydmVycyIsImNvbnNvbGUiLCJsb2ciLCJpc0Nsb3NlZCIsImNsb3NlZCIsInRoZW4iLCJ3YXJuIiwiZXJyb3IiLCJnZXROYXRzQ2xpZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./connection.js\n"));

/***/ })

});